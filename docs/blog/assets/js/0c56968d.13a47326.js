"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[424],{1708:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=t(4848),s=t(8453),r=t(2602);const o={slug:"comparison-api",title:"Exploring the Document Comparison APIs",tags:["Feature","API"],authors:["bentruscott"],image:"./Thumbnail.png",description:"Hyland Document Filters 24.2 introduces powerful Document Comparison APIs, enabling developers to implement robust document comparison capabilities. Enhance your applications by identifying and managing changes across various document types with this significant update."},a="Exploring the Document Comparison APIs in Hyland Document Filters 24.2",c={permalink:"/DocumentFilters/blog/comparison-api",source:"@site/blog/2024-05-29-comparison-api/index.md",title:"Exploring the Document Comparison APIs",description:"Hyland Document Filters 24.2 introduces powerful Document Comparison APIs, enabling developers to implement robust document comparison capabilities. Enhance your applications by identifying and managing changes across various document types with this significant update.",date:"2024-05-29T00:00:00.000Z",tags:[{label:"Feature",permalink:"/DocumentFilters/blog/tags/feature"},{label:"API",permalink:"/DocumentFilters/blog/tags/api"}],readingTime:6.67,hasTruncateMarker:!0,authors:[{name:"Ben Truscott",title:"Document Filters Principal Engineer",imageURL:"https://github.com/bentruscott.png",key:"bentruscott"}],frontMatter:{slug:"comparison-api",title:"Exploring the Document Comparison APIs",tags:["Feature","API"],authors:["bentruscott"],image:"./Thumbnail.png",description:"Hyland Document Filters 24.2 introduces powerful Document Comparison APIs, enabling developers to implement robust document comparison capabilities. Enhance your applications by identifying and managing changes across various document types with this significant update."},unlisted:!1,prevItem:{title:"Document Filters 24.3 Release",permalink:"/DocumentFilters/blog/24.3-release"},nextItem:{title:"Document Filters 24.2 Release",permalink:"/DocumentFilters/blog/24.2-release"}},l={image:t(6736).A,authorsImageUrls:[void 0]},d=[{value:"Key Features of the Document Comparison APIs",id:"key-features-of-the-document-comparison-apis",level:2},{value:"Text Content Comparison",id:"text-content-comparison",level:3},{value:"Reading Order Analysis",id:"reading-order-analysis",level:3},{value:"Independence from File Types",id:"independence-from-file-types",level:3},{value:"Formatting and Pagination Considerations",id:"formatting-and-pagination-considerations",level:3},{value:"Benefits of Using Hyland Document Filters for Document Comparison",id:"benefits-of-using-hyland-document-filters-for-document-comparison",level:2},{value:"Accuracy and Reliability",id:"accuracy-and-reliability",level:3},{value:"Scalability",id:"scalability",level:3},{value:"Integration Flexibility",id:"integration-flexibility",level:3},{value:"Implementing Document Comparison",id:"implementing-document-comparison",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Document Filters Evaluation",id:"document-filters-evaluation",level:2},{value:"Document Filters Resources",id:"document-filters-resources",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The release of ",(0,i.jsx)(n.a,{href:"/DocumentFilters/blog/24.2-release",children:"Hyland Document Filters 24.2"}),"\nmarks a significant milestone with the introduction of powerful Document\nComparison APIs. These new features are designed to enhance the ability of\ndevelopers to implement robust document comparison capabilities within their\napplications, facilitating the identification and management of changes across\nvarious document types."]}),"\n",(0,i.jsx)(n.h2,{id:"key-features-of-the-document-comparison-apis",children:"Key Features of the Document Comparison APIs"}),"\n",(0,i.jsx)(n.p,{children:"The Document Comparison APIs in Hyland Document Filters 24.2 offer several\nadvanced features that cater to the diverse needs of document management and\nprocessing. Here are the highlights:"}),"\n",(0,i.jsx)(n.h3,{id:"text-content-comparison",children:"Text Content Comparison"}),"\n",(0,i.jsx)(n.p,{children:"The APIs enable precise comparison of text content between two documents. This\nfeature supports word-level granularity, allowing users to detect and highlight\ninsertions, deletions, and modifications with accuracy. Whether you're comparing\ncontract versions or tracking changes in a collaborative document, this\nfunctionality ensures that no alteration goes unnoticed."}),"\n",(0,i.jsx)(n.h3,{id:"reading-order-analysis",children:"Reading Order Analysis"}),"\n",(0,i.jsx)(n.p,{children:"Maintaining the logical flow of content is crucial in document comparison. The\nAPIs analyze the reading order to ensure that the comparison respects the\nintended sequence of information. This is particularly useful for complex\ndocuments like reports and academic papers where the order of content\nsignificantly impacts comprehension."}),"\n",(0,i.jsx)(n.h3,{id:"independence-from-file-types",children:"Independence from File Types"}),"\n",(0,i.jsx)(n.p,{children:"One of the standout features of these APIs is their ability to compare documents\nregardless of their file types. Hyland Document Filters support a wide range of\nformats, including DOCX, PDF, HTML, and more. This flexibility means you can\ncompare a Word document with a PDF file seamlessly, making it easier to manage\ndiverse document types within your workflow."}),"\n",(0,i.jsx)(n.h3,{id:"formatting-and-pagination-considerations",children:"Formatting and Pagination Considerations"}),"\n",(0,i.jsx)(n.p,{children:"The APIs are equipped to handle differences in formatting and pagination. Users\ncan choose to include or exclude headers, footers, and fields in the comparison,\nproviding control over which elements are considered. This level of\ncustomization ensures that the comparison results are tailored to your specific\nneeds, whether you're focusing on content changes or layout adjustments."}),"\n",(0,i.jsx)(n.h2,{id:"benefits-of-using-hyland-document-filters-for-document-comparison",children:"Benefits of Using Hyland Document Filters for Document Comparison"}),"\n",(0,i.jsx)(n.h3,{id:"accuracy-and-reliability",children:"Accuracy and Reliability"}),"\n",(0,i.jsx)(n.p,{children:"Hyland Document Filters are renowned for their precision and reliability. The\nDocument Comparison APIs leverage this robust foundation to deliver accurate\ncomparison results, ensuring that even the smallest changes are detected and\nreported."}),"\n",(0,i.jsx)(n.h3,{id:"scalability",children:"Scalability"}),"\n",(0,i.jsx)(n.p,{children:"Whether you're comparing a handful of documents or processing thousands daily,\nthe APIs are designed to scale with your needs. Their performance and efficiency\nmake them suitable for enterprise-level applications."}),"\n",(0,i.jsx)(n.h3,{id:"integration-flexibility",children:"Integration Flexibility"}),"\n",(0,i.jsx)(n.p,{children:"The APIs are designed to be easily integrated into various applications, whether\ndesktop, web, or mobile. This flexibility allows you to incorporate document\ncomparison capabilities into your existing workflows with minimal disruption."}),"\n",(0,i.jsx)(n.h2,{id:"implementing-document-comparison",children:"Implementing Document Comparison"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["A complete example of comparing documents can be found on GitHub for\n",(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/tree/master/samples/csharp/CompareDocuments",children:"C#"}),"\nand\n",(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/blob/master/samples/python/CompareDocuments.py",children:"Python"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"Integrating the Document Comparison APIs into your application is\nstraightforward. Here's a high-level overview of how you can get started:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialize the API"}),": Begin by setting up the Document Filters environment\nand initializing the Document Comparison API."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="C#" showLineNumbers',children:'Hyland.DocumentFilters.Api api = new Hyland.DocumentFilters.Api();\napi.Initialize("License Code", ".")\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load the Documents"}),": Load the documents you wish to compare. The API\nsupports various input formats, making it easy to work with different\ndocument types."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="C#" showLineNumbers',children:'Extractor doc1 = api.OpenExtractor("path/to/document1.docx", OpenMode.Paginated);\nExtractor doc2 = api.OpenExtractor("path/to/document2.pdf", OpenMode.Paginated);\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Perform the Comparison"}),": Execute the comparison operation and retrieve the\nresults. The API provides detailed output, highlighting the differences\nbetween the documents."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="C#" showLineNumbers',children:"using (var compare = doc1.Compare(doc2)) {\n   // Work with compare results\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process the Results"}),": Utilize the comparison results within your\napplication. You can display the differences, generate reports, or trigger\nfurther processing based on the detected changes."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="C#" showLineNumbers',children:"while (compare.MoveNext())\n{\n    var diff = compare.Current;\n    // Work with diff...\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"As you enumerate over the items in a compare result, the diffs will be one of\nthe following types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Equals"})," - These diff items are not included by default but can be enabled\nwith a flag."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Insert"})," - Text exists in the new/revised document but not in the\nold/original document."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delete"})," - Text exists in the old/original document but not in the\nnew/revised document."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Using this information, we can create side-by-side comparison views that show\nthe edits to both the original and revised documents."}),"\n",(0,i.jsx)(r.A,{src:t(5276).A,alt:"Hyland Document Filters - Document Comparison Markup"}),"\n",(0,i.jsxs)(n.p,{children:["To produce the marked-up version, we can use the Document Filter's ",(0,i.jsx)(n.a,{href:"https://docs.hyland.com/DocumentFilters/en_US/Print/object_reference/canvas_interface.html",children:"Canvas\nobject"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"While enumerating the diffs, you may encounter situations where some pages do\nnot have differences. Additionally, as content is added or removed, the page\nindexes of the original and revised documents can get out of sync."}),"\n",(0,i.jsx)(n.p,{children:"Handling scenarios where pages do not have differences or where page indexes get\nout of sync due to content changes requires a careful approach. Here\u2019s how we\ncan manage this:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create Two Output Canvases"}),": One for the original document and one for the\nrevised document."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Track the Current Page"}),": Maintain a record of the current page being\nprocessed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ensure Page Rendering"}),': As we enumerate the diffs, ensure that all pages\nup to the "current page" have been rendered.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mark Up Diffs"}),": Proceed to mark up the differences on the current page\nonce rendering is confirmed."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This method ensures that the comparison view remains accurate and consistent,\nregardless of the number of differences or content shifts between the original\nand revised documents."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="C#" showLineNumbers',children:"private void ensurePage(int pageIndex, Extractor doc, Canvas canvas, ref int currentPage, bool isLeft)\n{\n   while (currentPage < pageIndex)\n   {\n      using var page = doc.GetPage(++currentPage);\n      canvas.RenderPage(page);\n   }\n   canvas.SetBrush(isLeft ? 0x50ff0000 : 0x5000ff00, 1);\n   canvas.SetPen(0, 0, 0);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The ensurePage function takes the pageIndex of the page being rendered, the\nExtractor containing either the original or revised document, the destination\nCanvas, the page index of the last page rendered (i.e., the current page on the\ncanvas), and a boolean indicating whether the document is the left document\n(i.e., the original)."}),"\n",(0,i.jsx)(n.p,{children:"The function renders all pages up to pageIndex and then sets the brush to be\neither red or green with slight transparency, depending on whether the document\nis the original."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="C#" showLineNumbers',children:"using Canvas leftOutputCanvas = api.MakeOutputCanvas(LeftOutput, CanvasType.PDF);\nusing Canvas rightOutputCanvas = _api.MakeOutputCanvas(RightOutput, CanvasType.PDF);\n\nint currentLeft = -1, currentRight = -1;\nwhile (compareResult.MoveNext())\n{\n   if (compareResult.Current.Type == DifferenceType.Equal || compareResult.Current.Type == DifferenceType.NextBatch)\n      continue;\n\n   foreach (var hit in compareResult.Current.Details)\n   {\n      if (compareResult.Current.Type == DifferenceType.Delete)\n      {\n         ensurePage(hit.PageIndex, left, leftOutputCanvas, ref currentLeft, true);\n         leftOutputCanvas.Rect(FromRectF(hit.Bounds));\n      }\n\n      if (compareResult.Current.Type == DifferenceType.Insert)\n      {\n         ensurePage(hit.PageIndex, right, rightOutputCanvas, ref currentRight, false);\n         rightOutputCanvas.Rect(FromRectF(hit.Bounds));\n      }\n   }\n}\nensurePage(left.PageCount, left, leftOutputCanvas, currentLeft, true);\nensurePage(right.PageCount, right, rightOutputCanvas, currentRight, true);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Upon completion, you will have two PDFs. The ",(0,i.jsx)(n.code,{children:"LeftOutput"})," will contain every\npage from the original document, marked up with text that does not exist in the\nrevised document. Similarly, the ",(0,i.jsx)(n.code,{children:"RightOutput"})," will contain every page from the\nrevised document, marked up with text that does not exist in the original\ndocument."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are building a viewing component, you may also want to keep track of the\n",(0,i.jsx)(n.code,{children:"hit.PageIndex"})," properties to provide page synchronization as the user navigates\nbetween the differences."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["A complete example of comparing documents can be found on GitHub for\n",(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/tree/master/samples/csharp/CompareDocuments",children:"C#"}),"\nand\n",(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/blob/master/samples/python/CompareDocuments.py",children:"Python"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"The introduction of Document Comparison APIs in Hyland Document Filters 24.2 is\na game-changer for developers and organizations looking to streamline their\ndocument management processes. With features like text content comparison,\nreading order analysis, and independence from file types, these APIs offer a\ncomprehensive solution for detecting and managing document changes. By\nintegrating these powerful tools into your applications, you can enhance your\ndocument comparison capabilities and ensure the integrity and accuracy of your\ndocument workflows."}),"\n",(0,i.jsx)(n.h2,{id:"document-filters-evaluation",children:"Document Filters Evaluation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/blob/master/EVAL.md",children:"Try a feature limited version of Document Filters"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.hyland.com/en/resources/document-filters-version-evaluation",children:"Request a free Document Filters evaluation"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"document-filters-resources",children:"Document Filters Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters",children:"Document Filters on GitHub"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.nuget.org/packages/Hyland.DocumentFilters",children:"Document Filters on NuGet"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/tree/master/samples",children:"Document Filters Samples"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/tree/master/samples/csharp/CompareDocuments",children:"Compare Documents C#"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/Hyland/DocumentFilters/blob/master/samples/python/CompareDocuments.py",children:"Compare Documents Python"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.hyland.com/DocumentFilters/en_US/Print/index.html",children:"Document Filters Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.hyland.com/DocumentFilters/en_US/Print/release_notes/index.html",children:"Document Filters Release Notes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.hyland.com/en/products/document-filters",children:"Hyland"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},2602:(e,n,t)=>{t.d(n,{A:()=>s});t(6540);var i=t(4848);function s(e){let{src:n,alt:t}=e;return(0,i.jsx)("a",{href:n,target:"_blank",rel:"noopener noreferrer",children:(0,i.jsx)("img",{src:n,alt:t})})}},6736:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Thumbnail-c7d3b70d9f6e0e5c59fd8c903bb5b48a.png"},5276:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/CompareMarkup-0210bee8a72b387f01b518d7318f7b97.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);